{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync as _downloadAsync, IS_MANAGED_ENV } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nexport var Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n        type = _ref.type,\n        _ref$hash = _ref.hash,\n        hash = _ref$hash === void 0 ? null : _ref$hash,\n        uri = _ref.uri,\n        width = _ref.width,\n        height = _ref.height;\n\n    _classCallCheck(this, Asset);\n\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  _createClass(Asset, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      var _this = this;\n\n      var _await$ImageAssets$ge, width, height, name;\n\n      return _regeneratorRuntime.async(function downloadAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.downloaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (!this.downloading) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                _this._downloadCallbacks.push({\n                  resolve: resolve,\n                  reject: reject\n                });\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\");\n\n            case 6:\n              this.downloading = true;\n              _context.prev = 7;\n\n              if (!(Platform.OS === 'web')) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!ImageAssets.isImageType(this.type)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n\n            case 12:\n              _await$ImageAssets$ge = _context.sent;\n              width = _await$ImageAssets$ge.width;\n              height = _await$ImageAssets$ge.height;\n              name = _await$ImageAssets$ge.name;\n              this.width = width;\n              this.height = height;\n              this.name = name;\n              _context.next = 22;\n              break;\n\n            case 21:\n              this.name = AssetUris.getFilename(this.uri);\n\n            case 22:\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n\n            case 24:\n              this.localUri = _context.sent;\n              this.downloaded = true;\n\n              this._downloadCallbacks.forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve();\n              });\n\n              _context.next = 33;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](7);\n\n              this._downloadCallbacks.forEach(function (_ref3) {\n                var reject = _ref3.reject;\n                return reject(_context.t0);\n              });\n\n              throw _context.t0;\n\n            case 33:\n              _context.prev = 33;\n              this.downloading = false;\n              this._downloadCallbacks = [];\n              return _context.finish(33);\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 29, 33, 37]], Promise);\n    }\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n\n      var meta = getAssetByID(virtualAssetModule);\n\n      if (!meta) {\n        throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n      }\n\n      if (!IS_MANAGED_ENV) {\n        var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n            uri = _resolveAssetSource.uri;\n\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n        throw new Error('Assets must be initialized with Asset.fromModule');\n      }\n\n      var _AssetSources$selectA = AssetSources.selectAssetSource(meta),\n          uri = _AssetSources$selectA.uri,\n          hash = _AssetSources$selectA.hash;\n\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n\n      var type = '';\n\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n\n  return Asset;\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"mappings":"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","names":["Platform","getAssetByID","AssetSources","AssetUris","getEmbeddedAssetUri","ImageAssets","downloadAsync","IS_MANAGED_ENV","resolveAssetSource","Asset","name","type","hash","uri","width","height","localUri","downloaded","OS","getFilename","getFileExtension","downloading","Promise","resolve","reject","_downloadCallbacks","push","isImageType","getImageInfoAsync","forEach","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","Error","asset","includes","byHash","fromMetadata","metaHash","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring"],"sourceRoot":"","sources":["../src/Asset.ts"],"sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_MANAGED_ENV } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    // This only applies to assets that are bundled in Expo standalone apps\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_MANAGED_ENV) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}