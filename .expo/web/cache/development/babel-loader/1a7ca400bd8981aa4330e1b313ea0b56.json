{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\n\nvar _customSourceTransformer;\n\nvar _serverURL;\n\nvar _scriptURL;\n\nvar _sourceCodeScriptURL;\n\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  var sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL) {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      return null;\n    }\n\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n\n    if (!scriptURL.includes('://')) {\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n\n  return null;\n}\n\nfunction getScriptURL() {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = getAssetByID(source);\n\n  if (!asset) {\n    return undefined;\n  }\n\n  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"mappings":";AACA,SAASA,YAAT;AAEA,OAAOC,mBAAP;;AAIA,IAAIC,wBAAJ;;AACA,IAAIC,UAAJ;;AACA,IAAIC,UAAJ;;AACA,IAAIC,oBAAJ;;AAEA,SAASC,sBAAT,GAA+B;EAC7B,IAAID,oBAAJ,EAA0B;IACxB,OAAOA,oBAAP;EACD;;EAED,IAAIE,UAAU,GAAGC,gBAAgB,IAAIA,gBAAgB,CAACC,UAAtD;;EACA,IAAI,CAACF,UAAL,EAAiB;IACfA,UAAU,GAAGG,aAAa,IAAIA,aAAa,CAACD,UAA5C;EACD;;EACDJ,oBAAoB,GAAGE,UAAU,CAACI,SAAlC;EACA,OAAON,oBAAP;AACD;;AAED,SAASO,eAAT,GAAwB;EACtB,IAAIT,UAAU,KAAKU,SAAnB,EAA8B;IAC5B,IAAMC,mBAAmB,GAAGR,sBAAsB,EAAlD;IACA,IAAMS,KAAK,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACC,KAApB,CAA0B,mBAA1B,CAArC;;IACA,IAAIA,KAAJ,EAAW;MAETZ,UAAU,GAAGY,KAAK,CAAC,CAAD,CAAlB;IACD,CAHD,MAGO;MAELZ,UAAU,GAAG,IAAb;IACD;EACF;;EACD,OAAOA,UAAP;AACD;;AAED,SAASa,qBAAT,CAA+BL,SAA/B,EAAmE;EACjE,IAAIA,SAAJ,EAAe;IACb,IAAIA,SAAS,CAACM,UAAV,CAAqB,WAArB,CAAJ,EAAuC;MAErC,OAAO,IAAP;IACD;;IACDN,SAAS,GAAGA,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBP,SAAS,CAACQ,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAAZ;;IACA,IAAI,CAACR,SAAS,CAACS,QAAV,CAAmB,KAAnB,CAAL,EAAgC;MAG9BT,SAAS,GAAG,YAAYA,SAAxB;IACD;EACF;;EACD,OAAO,IAAP;AACD;;AAED,SAASU,YAAT,GAAqB;EACnB,IAAIjB,UAAU,KAAKS,SAAnB,EAA8B;IAC5BT,UAAU,GAAGY,qBAAqB,CAACV,sBAAsB,EAAvB,CAAlC;EACD;;EACD,OAAOF,UAAP;AACD;;AAED,OAAM,SAAUkB,0BAAV,CACJC,WADI,EAC+D;EAEnErB,wBAAwB,GAAGqB,WAA3B;AACD;AAMD,eAAc,SAAUC,kBAAV,CAA6BC,MAA7B,EAAwC;EACpD,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAOA,MAAP;EACD;;EAED,IAAMC,KAAK,GAAG1B,YAAY,CAACyB,MAAD,CAA1B;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,OAAOb,SAAP;EACD;;EAED,IAAMc,QAAQ,GAAG,IAAI1B,mBAAJ,CAAwBW,eAAe,EAAvC,EAA2CS,YAAY,EAAvD,EAA2DK,KAA3D,CAAjB;;EACA,IAAIxB,wBAAJ,EAA8B;IAC5B,OAAOA,wBAAwB,CAACyB,QAAD,CAA/B;EACD;;EACD,OAAOA,QAAQ,CAACC,YAAT,EAAP;AACD;AAEDC,MAAM,CAACC,cAAP,CAAsBN,kBAAtB,EAA0C,4BAA1C,EAAwE;EACtEO,GADsE,iBACnE;IACD,OAAOT,0BAAP;EACD;AAHqE,CAAxE;AAMO,IAAQU,SAAR,GAAsB/B,mBAAtB,CAAQ+B,SAAR","names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sourceRoot":"","sources":["../src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport { getAssetByID } from './AssetRegistry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare var nativeExtensions: any;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _scriptURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: string | undefined | null): string | null {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return null;\n}\n\nfunction getScriptURL(): string | null {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"module"}