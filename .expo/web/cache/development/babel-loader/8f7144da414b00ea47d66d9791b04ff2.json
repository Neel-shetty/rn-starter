{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nvar parser = new UAParser();\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nvar _sessionId = uuidv4();\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get installationId() {\n    var installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: canUseDOM ? UAParser(navigator.userAgent) : undefined\n    };\n  },\n\n  get isHeadless() {\n    return false;\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get isDetached() {\n    return false;\n  },\n\n  get expoVersion() {\n    return this.manifest.sdkVersion || null;\n  },\n\n  get linkingUri() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return this.expoVersion;\n  },\n\n  get deviceName() {\n    var _parser$getResult = parser.getResult(),\n        browser = _parser$getResult.browser,\n        engine = _parser$getResult.engine,\n        OS = _parser$getResult.os;\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get manifest() {\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  getWebViewUserAgentAsync: function getWebViewUserAgentAsync() {\n    return _regeneratorRuntime.async(function getWebViewUserAgentAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!canUseDOM) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", navigator.userAgent);\n\n          case 4:\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"mappings":"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","names":["canUseDOM","UAParser","uuidv4","parser","ID_KEY","_sessionId","name","appOwnership","installationId","localStorage","getItem","setItem","error","sessionId","platform","web","navigator","userAgent","undefined","isHeadless","isDevice","isDetached","expoVersion","manifest","sdkVersion","linkingUri","location","origin","pathname","expoRuntimeVersion","deviceName","getResult","browser","engine","OS","os","nativeAppVersion","nativeBuildVersion","systemFonts","statusBarHeight","deviceYearClass","process","env","APP_MANIFEST","experienceUrl","debugMode","__DEV__","getWebViewUserAgentAsync"],"sourceRoot":"","sources":["../src/ExponentConstants.web.ts"],"sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? UAParser(navigator.userAgent) : undefined };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string | null {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"]},"metadata":{},"sourceType":"module"}